version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    #parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy Front End environment
          when: on_fail
          #TODO: Check bucket is destroyed - see tips for bucket policy that will work...?
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} 
      - run: 
          name: Destroy Back End environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} 

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end tests
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end tests
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: |
          cd frontend
          npm install
          npm audit fix --audit-level=critical --force
          npm audit fix --force          
          npm audit --audit-level=critical

  scan-backend:    
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: |
          cd backend
          npm install
          npm audit fix --audit-level=critical --force
          npm audit fix --force          
          npm audit --audit-level=critical              
      
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip      
      # Comment out for now and deploy stacks manually while developing...
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"                            
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"    
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Dynamically build inventory.txt file.
            cd .circleci/ansible
            echo "[all]" >> inventory.txt
            #echo "3.86.105.61" >> inventory.txt
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicDnsName' --output text >> inventory.txt            
            #aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory.txt            
            cat inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
        

  configure-infrastructure:
    docker:      
      - image: python:3.9.16
    steps:      
      - checkout      
      - add_ssh_keys:
          fingerprints: ["4f:fe:90:2b:6b:8f:6d:40:84:18:6d:cf:08:f4:e4:22"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: |                        
            apt-get update -y
            apt install ansible -y                      
      - run:
          name: Configure Server
          command: |            
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml --ssh-common-args='-o StrictHostKeyChecking=no'                   
      #- destroy-environment #leave environment up for now...      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0            
    steps:      
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend 
            npm install
            ## Run and save the migration output
            npm run migrations > migrations_dump.txt
            echo "migrations dump file"
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
              #curl -H "Content-Type:text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
              # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
              # anthony.d.r.barker@gmail.com =  WSnrgaa3QsW88gPCnCQzAn
              curl https://kvdb.io/WSnrgaa3QsW88gPCnCQzAn/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      #- destroy-environment     

  deploy-frontend:
    docker:      
      - image: python:3.9.16
    steps:      
      - checkout
      - run:
          name: Install dependencies
          command: |            
            apt-get update -y
            apt install ansible -y
            apt install npm -y
            apt-get install -y awscli
      - run:
          name: Get backend url
          command: |            
            export BACKEND_DNSNAME=$(eaws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicDnsName' --output text)            
            export API_URL="http://${BACKEND_DNSNAME}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_DNSNAME}:3030" >> frontend/.env
            cat frontend/.env            
      - run:
          name: Deploy frontend objects
          command: |            
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist            
            aws s3 cp dist s3://udapeople-067215852314 --recursive            
      #- destroy-environment     
                    
  deploy-backend:
    docker:
      - image: python:3.9.16
    steps:
      
      - checkout
      - add_ssh_keys:
          fingerprints: ["4f:fe:90:2b:6b:8f:6d:40:84:18:6d:cf:08:f4:e4:22"]
      - attach_workspace:
          at: ~/      
      - run:
          name: Install dependencies
          command: |            
            apt-get update -y
            apt install ansible -y
            apt install npm -y
            apt-get install -y awscli
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            ## Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml            
      #- destroy-environment     

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      ######TEMP DISABLED####
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      ########################
      - deploy-infrastructure:
          requires: [build-frontend, build-backend]
 #     - deploy-infrastructure:
 #         requires: [test-frontend, test-backend, scan-frontend, scan-backend]
 #         filters:
 #           branches:
 #             only: [test-feature-branch]       
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
           requires: [configure-infrastructure]
      - deploy-frontend:
           requires: [run-migrations]
      - deploy-backend:
           requires: [run-migrations]
 #     - smoke-test:
 #         requires: [deploy-backend, deploy-frontend]
 #     - cloudfront-update:
 #         requires: [smoke-test]
 #     - cleanup:
 #         requires: [cloudfront-update]