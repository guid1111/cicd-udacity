version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      AwsResourceSuffix:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy Front End environment
          when: on_fail          
          command: |
            #Empty bucket before deleting stack since non-empty S2 buckets can't be deleted.
            aws s3 rm s3://udapeople-<< parameters.AwsResourceSuffix >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.AwsResourceSuffix >>
      - run: 
          name: Destroy Back End environment. Empty bucket first.
          when: on_fail
          command: |            
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.AwsResourceSuffix >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      WorkflowId:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
      KvdbKey:
        type: string
        default: WSnrgaa3QsW88gPCnCQzAn      
    steps:
      - run:
          name: Revert migrations          
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure  https://kvdb.io/<< parameters.KvdbKey >>/migration_<< parameters.WorkflowId >>)            
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              #npm run migration:revert
              npm run migrations:revert
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end tests
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end tests
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: |
          cd frontend
          npm install
          npm audit fix --audit-level=critical --force
          npm audit fix --force          
          npm audit --audit-level=critical

  scan-backend:    
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: |
          cd backend
          npm install
          npm audit fix --audit-level=critical --force
          npm audit fix --force          
          npm audit --audit-level=critical              
      
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip            
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"                            
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"    
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Create inventory file for ansible, so that it knows which hosts to visit when running scripts.
            cd .circleci/ansible
            echo "[all]" >> inventory.txt
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicDnsName' --output text >> inventory.txt            
            #aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory.txt            
            echo "invetory.txt contents..."
            cat inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
        

  configure-infrastructure:
    docker:      
      - image: python:3.9.16
    steps:      
      - checkout      
      - add_ssh_keys:
          fingerprints: ["d7:74:35:39:50:b2:4d:3d:97:76:7b:c8:fb:ee:7f:7a"]                                    
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: |                        
            apt-get update -y
            apt install ansible -y    
      - run: 
          name: Setup Environment Variables
          command: |
            cd backend
            touch .env
            echo "NODE_ENV=production" >> .env
            echo "VERSION=1" >> .env
            echo "TYPEORM_CONNECTION=postgres" >> .env
            echo "TYPEORM_MIGRATIONS_DIR=./src/migrations" >> .env
            echo "TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts" >> .env
            echo "TYPEORM_MIGRATIONS=./src/migrations/*.ts" >> .env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> .env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> .env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> .env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> .env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> .env
            cat .env
            cd ..
      - run:
          name: Configure Server
          command: |            
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml --ssh-common-args='-o StrictHostKeyChecking=no'
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/.env
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0            
    steps:      
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend 
            npm install
            ## Run and save the migration output
            npm run migrations > migrations_dump.txt
            echo "migrations dump file"
            cat migrations_dump.txt
            #https://knowledge.udacity.com/questions/999887
            #Just edit create a backend/.env file with correct contents...
            # I don't think you need to do both this AND the step in asnble???
            #echo -e "NODE_ENV=local\nVERSION=1\nTYPEORM_CONNECTION=${TYPEORM_CONNECTION}\nTYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR}\nTYPEORM_ENTITIES=${TYPEORM_ENTITIES}\nTYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}\nTYPEORM_HOST=${TYPEORM_HOST}\nTYPEORM_PORT=${TYPEORM_PORT}\nTYPEORM_USERNAME=${TYPEORM_USERNAME}\nTYPEORM_PASSWORD=${TYPEORM_PASSWORD}\nTYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then              
              curl --insecure https://kvdb.io/WSnrgaa3QsW88gPCnCQzAn/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment     
      - revert-migrations

  deploy-frontend:
    docker:      
      - image: python:3.9.16
    steps:      
      - checkout
      - run:
          name: Install dependencies
          command: |            
            apt-get update -y
            apt install ansible -y
            apt install npm -y
            apt-get install -y awscli
      - run:
          name: Get backend url
          command: |            
            export BACKEND_DNSNAME=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicDnsName' --output text)                        
            export API_URL="http://${BACKEND_DNSNAME}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_DNSNAME}:3030" >> frontend/.env
            cat frontend/.env            
      - run:
          name: Deploy frontend objects
          command: |            
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist                        
            aws s3 cp dist s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - destroy-environment     
      - revert-migrations
                    
  deploy-backend:
    docker:
      - image: python:3.9.16
    steps:      
      - checkout
      - add_ssh_keys:
          fingerprints: ["d7:74:35:39:50:b2:4d:3d:97:76:7b:c8:fb:ee:7f:7a"]
      - attach_workspace:
          at: ~/      
      - run:
          name: Install dependencies
          command: |            
            apt-get update -y
            apt install ansible -y
            apt install npm -y
            apt-get install -y awscli
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            ## Zip the directory
            mkdir -p .circleci/ansible/roles/deploy/files
            tar -C backend -czvf ./artifact.tar.gz .          
            cp ./artifact.tar.gz .circleci/ansible/roles/deploy/files/
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml --ssh-common-args='-o StrictHostKeyChecking=no'   
      - destroy-environment     
      - revert-migrations

  smoke-test:
    docker:
      - image: python:3.9.16
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            apt-get update -y
            apt-get install -y awscli
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_DNSNAME=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicDnsName' --output text)
            API_URL="http://${BACKEND_DNSNAME}:3030"
            echo "API_URL = ${API_URL}"
            if curl -s $API_URL/api/status | grep "ok"
            then              
              exit 0
            else
              exit 1
            fi      
      - run:
          name: Frontend smoke test.
          command: |            
            FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then
              exit 0              
            else
              exit 1
            fi
      - destroy-environment     
      - revert-migrations

#TODO: This changes the bucket behind a cloud front distribution.  Need to run the manual step to create the cloud front distribution + "old" bucket it points at...
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - destroy-environment     
      - revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}" 
            
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      ######TEMP DISABLED####
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      ########################
      - deploy-infrastructure:
          requires: [build-frontend, build-backend]
          #requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            #Only builds on master will deploy. Pipelines for other branches will stop and build, test, scan.
            branches:            
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
           requires: [configure-infrastructure]
      - deploy-frontend:
           requires: [run-migrations]
      - deploy-backend:
           requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
         requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]